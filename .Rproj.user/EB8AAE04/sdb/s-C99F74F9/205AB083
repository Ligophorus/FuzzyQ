{
    "collab_server" : "",
    "contents" : "#' Sort Species by fuzzyq Clustering\n#'\n#' Sort species in a matrix or dataframe according to the clustering of a \\code{fuzzyq} object. This is\n#'     useful prior to plotting Commonness Indices derived from bootstrap replicates.\n#' @param M A matrix or dataframe with information of species in columns.\n#' @param fq A list of class \\code{fuzzyq} returned by \\code{FuzzyQ::fuzzyq}.\n#' @return A matrix or dataframe with information of species in columns sorted according to\n#'    \\code{fq$spp}.\n#' @examples\n#' data(antsA)\n#' FQAnts <- fuzzyq(antsA, sorting = TRUE)\n#' # Compute 95% confidence intervals for Commonness Indices of species:\n#' Nboot = 1e3\n#' BS.FQAnts <- fuzzyqBoot (antsA, Nboot, level='spp')\n#' BS.FQAnts <- fuzzyqCI(BS.FQAnts, fq=FQAnts)\n#' # Plot Commonness Indices and their respective confidence intervals:\n#' BS.FQAnts <- sortClus(BS.FQAnts, FQAnts)\n#' spp <- FQAnts$spp\n#' plot(spp[,3], cex.axis=0.8, xaxt='n', ylab=\"Commoness index\",\n#'     ylim=c(0, max(BS.FQAnts)), xlab=\"Species\",col=col.RC[spp[,1]+1],\n#'     pch=16, cex=0.8, las = 1)\n#' ebar.int <- seq_len(nrow(spp))\n#' arrows(ebar.int, BS.FQAnts[\"Lower\", ], ebar.int, BS.FQAnts[\"Upper\", ],\n#'       length= 0, col=col.RC[spp[,1]+1])\n#' axis(1, at=ebar.int, labels=rownames(spp), las=2, cex.axis=0.6)\nsortClus <- function(M, fq) {\n  if (length(dim(M)) != 2 || !(is.data.frame(M) || is.numeric(M)))\n    stop(\"M is not a dataframe or a numeric matrix.\")\n  if (\"fuzzyq\" %in% class(fq) == FALSE) stop(\"fq is not a fuzzyq\n                                                  object.\")\n  if (fq$is.sorted == FALSE) stop(\"Common-rare species are not sorted in M.\n                                      Run fuzzyq with sorting = TRUE\")\n  M <- M[, match(rownames(fq$spp), colnames(M))]\n  return(M)\n}\n\n#' Abundance Occupancy Plot\n#'\n#' Plots the abundance-occupancy relationship of species in a community categorized as common\n#'     or rare by fuzzyq.\n#' @param fq A list of class \\code{fuzzyq} returned by \\code{FuzzyQ::fuzzyq}.\n#' @param col.rc A vector specifying two colors to be used to plot common and rare species.\n#'     Accept any valid color specification in R.\n#' @param opacity Number within [0,1] specificying the opacity of convex hulls grouping\n#'     common and rare species.\n#' @param log.x Logical. Whether or not the x axis should be in log10 scale.\n#' @param log.y Logical. Whether or not the y axis should be in log10 scale.\n#' @param xLab String. Title for the x axis.\n#' @param yLab String. Title for the y axis\n#' @param ... Arguments to be passed to graphical parameters in R.\n#' @return A scatter plot of occupancy vs. abundance of species. Convex hulls identify common\n#'     and rare species.\n#' @examples\n#' data(antsA)\n#' FQAnts <- fuzzyq(antsA, sorting = TRUE)\n#' AOplot(FQAnts) # Plor with default values\n#' # Alternative with colors specified in Hex format, logarithmic axes and other point format\n#' AOplot(FQAnts, col.rc = c(\"#013bad\",\"#bd5f69\"),\n#'        log.x = TRUE, log.y = TRUE, pch = 4)\nAOplot <- function(fq, col.rc = c(\"red\", \"blue\"), opacity = 0.1,\n                  log.x = FALSE, log.y = FALSE,\n                  xLab = \"Fraction of sites occupied\", yLab = \"Mean abundance\",\n                    ...) {\n  if (\"fuzzyq\" %in% class(fq) == FALSE) stop(\"fq is not a fuzzyq object.\")\n  if (fq$is.sorted == FALSE) stop(\"Common-rare species are not sorted in M.\n                              Run fuzzyq with sorting= TRUE\")\n  if (length(col.rc) != 2) stop(\"Wrong col.rc format. Specify two colors\")\n  # check color format\n   is.color <- function(x) {\n    if (is.numeric(x)) return(x > 0 & (x %% 1 == 0))\n    if (any(grepl(\"^[0-9]+$\", x))) {\n      x[grepl(\"^[0-9]+$\", x)] <- palette()[(as.numeric(x[grepl(\"^[0-9]+$\",\n                                            x)]) - 1) %% 8 + 1]\n    }\n    y <- grepl(\"^\\\\#[a-fA-F0-9]{6}$\", x) | grepl(\"^\\\\#[a-fA-F0-9]{8}$\",\n                                                 x) | (x %in% colors())\n    return(y)\n   }\n  if (all(is.color(col.rc)) == FALSE) stop(\"Wrong col.rc specification.\n                                           Use a valid color call.\")\n      x <- fq$A_O[, 1]\n      y <- fq$A_O[, 2]\n      if (log.x == TRUE) {\n         x <- log10(x)\n         xLab <- bquote(paste(log[10]~\"(\"~.(xLab)~\")\"))\n         }\n      if (log.y == TRUE) {\n         y <- log10(y)\n         yLab <- bquote(paste(log[10]~\"(\"~.(yLab)~\")\"))\n         }\n      plot(x, y, col = col.rc[fq$spp[, 1] + 1], xlab = xLab, ylab = yLab, ...)\n      #draw convex hulls around common,rare spp\n      xy <- cbind(x, y)\n      Hrar <- chull(xy[which(fq$spp[, 1] == 0), ])\n      Hcom <- chull(xy[which(fq$spp[, 1] == 1), ])\n      polygon(xy[which(fq$spp[, 1] == 0), ][Hrar, ], border = col.rc[1],\n              col = adjustcolor(col.rc[1], alpha.f = opacity))\n      polygon(xy[which(fq$spp[, 1] == 1), ][Hcom, ], border = col.rc[2],\n              col = adjustcolor(col.rc[2], alpha.f = opacity))\n}\n",
    "created" : 1594391821973.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2218881686",
    "id" : "205AB083",
    "lastKnownWriteTime" : 1595516782,
    "last_content_update" : 1595516782277,
    "path" : "F:/nuvol/FuzzyQ/R/utility_functions.R",
    "project_path" : "R/utility_functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}